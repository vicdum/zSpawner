# GitHub Actions için Workflow'un adı
name: Minecraft Plugin CI & Release on Push

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    name: Build Plugin
    runs-on: ubuntu-latest
    steps:
      # 1. Adım: Proje dosyalarını sanal makineye kopyalar
      - name: Checkout repository
        uses: actions/checkout@v4

      # YENİ HATA AYIKLAMA ADIMI
      # Bu adım, sanal makinedeki tüm dosyaları listeleyerek loglara yazdırır.
      # Böylece 'libs' klasörünün varlığını kontrol edebiliriz.
      - name: List files in workspace
        run: ls -R

      # 2. Adım: Java'yı kurar.
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # 3. Adım: Projeyi Maven ile derler ve JAR paketini oluşturur.
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # 4. Adım: Oluşturulan JAR dosyasını geçici olarak saklar.
      - name: Upload artifact for release
        uses: actions/upload-artifact@v4
        with:
          name: plugin-jar
          path: target/*.jar
          
  # Release işi aynı kalabilir...
  release:
    name: Create GitHub Release
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download plugin JAR
        uses: actions/download-artifact@v4
        with:
          name: plugin-jar
      - name: Create Pre-release and Upload JAR
        uses: softprops/action-gh-release@v2
        with:
          files: "*.jar"
          prerelease: true
          tag_name: "build-${{ github.run_number }}"
          name: "Geliştirme Sürümü (Build ${{ github.run_number }})"
          body: |
            Bu, `main` branch'ine yapılan son push ile otomatik olarak oluşturulmuş bir geliştirme sürümüdür.
            Commit SHA: `${{ github.sha }}`
